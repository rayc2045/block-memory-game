console.time();let blockData=[{selector:".block1",name:"1",pitch:"1"},{selector:".block2",name:"2",pitch:"2"},{selector:".block3",name:"3",pitch:"3"},{selector:".block4",name:"4",pitch:"4"}],soundData=[{name:"correct",sets:[1,3,5,8]},{name:"wrong",sets:[2,4,5.5,7]}];class Blocks{constructor(blockAssign,soundAssign){this.blocks=blockAssign.map((data,index)=>({name:data.name,el:document.querySelector(data.selector),audio:this.getAudioObject(data.pitch)})),this.soundSets=soundAssign.map((data,index)=>({name:data.name,sets:data.sets.map(pitch=>this.getAudioObject(pitch))}))}getAudioObject(pitch){return new Audio(`https://raw.githubusercontent.com/rayc2045/block-memory-game/main/audio/piano_sound_${pitch}.wav`)}flashAndPlayAudio(note){const block=this.blocks.find(data=>data.name===note);block&&(block.el.classList.add("light"),block.audio.currentTime=0,block.audio.play(),this.allOn||setTimeout(()=>block.el.classList.remove("light"),100))}turnAllOn(){this.allOn=!0,this.blocks.forEach(block=>block.el.classList.add("light"))}turnAllOff(){this.allOn=!1,this.blocks.forEach(block=>block.el.classList.remove("light"))}playSet(type){const sets=this.soundSets.find(obj=>obj.name===type).sets;sets.forEach(obj=>{obj.currentTime=0,obj.play()})}}class MemoryGame{constructor(){this.blocks=new Blocks(blockData,soundData),this.wrapperElement=document.querySelector(".wrapper"),this.statusElement=document.querySelector(".status"),this.blockElements=document.querySelectorAll(".block"),this.inputProgressElement=document.querySelector(".inputProgress"),this.circleElements=document.querySelectorAll(".circle"),this.endWindowElement=document.querySelector(".endWindow"),this.memoryLevelElement=document.querySelector(".memoryLevel"),this.restartElement=document.querySelector(".restart"),this.levelString="1234",this.currentLevel=0,this.replayTimes,this.playInterval=400,this.mode="Waiting",this.userInput="",this.events()}events(){document.onselectstart=()=>!1,document.ondragstart=()=>!1,document.oncontextmenu=()=>!1,setTimeout(()=>this.startNewLevel(),1500),this.blockElements.forEach(el=>{el.addEventListener("click",e=>{this.checkInputs(e.target.id)})}),this.restartElement.addEventListener("click",()=>{this.wrapperElement.classList.remove("blur"),this.endWindowElement.classList.add("hide"),this.startNewLevel()})}startNewLevel(){if(this.replayTimes=1,0===this.currentLevel)this.levelString="1234",this.statusElement.textContent="Click in the flashing order";else{for(let i=0;i<2;i++)this.levelString+=this.getRandomNumber(1,4);this.statusElement.textContent=`Memory Level: ${this.currentLevel}`}console.log(`currentLevel: ${this.currentLevel}`),console.log(`levelString: '${this.levelString}'`),this.startListening()}getRandomNumber(a,b){return Math.floor(Math.random()*b)+a}startListening(){this.mode="Listening",this.blockElements.forEach(el=>el.classList.add("stopInputting")),this.showInputProgressCircles("");const notesArray=this.levelString.split("");this.timer=setInterval(()=>{const note=notesArray.shift();notesArray.length||(clearInterval(this.timer),setTimeout(()=>this.startInputting(),this.playInterval)),this.blocks.flashAndPlayAudio(note)},this.playInterval)}startInputting(){this.mode="Inputting",this.blockElements.forEach(el=>el.classList.remove("stopInputting")),this.userInput=""}checkInputs(inputChar){if("Inputting"===this.mode){const tempString=this.userInput+inputChar;this.userInput+=inputChar,this.showInputProgressCircles(tempString),this.blocks.flashAndPlayAudio(inputChar),0===this.levelString.indexOf(tempString)?tempString===this.levelString&&this.gameContinue():this.replayTimes>0?this.replayCurrentLevel():this.gameOver()}}showInputProgressCircles(tempString){this.inputProgressElement.innerHTML="",this.levelString.split("").forEach((data,index)=>{this.inputProgressElement.innerHTML+=`\n\t\t\t\t<div class='circle${index<tempString.length?" correct":""}'></div>`}),this.inputProgressElement.classList.remove("correct","wrong"),tempString===this.levelString&&setTimeout(()=>{this.inputProgressElement.classList.add("correct")},this.playInterval),0!==this.levelString.indexOf(tempString)&&this.inputProgressElement.classList.add("wrong")}gameContinue(){this.replayTimes=1,this.currentLevel++,this.mode="Waiting",setTimeout(()=>{this.blocks.turnAllOn(),this.blocks.playSet("correct"),this.statusElement.textContent="Correct!"},this.playInterval),setTimeout(()=>this.blocks.turnAllOff(),this.playInterval+400),setTimeout(()=>this.startNewLevel(),this.playInterval+600)}replayCurrentLevel(){this.replayTimes--,this.mode="Waiting",this.blocks.turnAllOn(),this.blocks.playSet("wrong"),setTimeout(()=>this.blocks.turnAllOff(),this.playInterval),setTimeout(()=>{0===this.currentLevel?this.statusElement.textContent="Click in the flashing order":this.statusElement.textContent=`Memory Level: ${this.currentLevel}`,this.startListening()},this.playInterval+600)}gameOver(){this.mode="Waiting",this.blocks.turnAllOn(),this.blocks.playSet("wrong"),setTimeout(()=>{this.inputProgressElement.innerHTML="",this.blocks.turnAllOff(),this.wrapperElement.classList.add("blur"),this.endWindowElement.classList.remove("hide"),this.currentLevel<=1?this.memoryLevelElement.textContent="Oops! You didn't accomplish any level.":this.memoryLevelElement.textContent=`Your Memory Level: ${this.currentLevel-1}`,this.currentLevel=0},this.playInterval)}}window.onload=()=>new MemoryGame;